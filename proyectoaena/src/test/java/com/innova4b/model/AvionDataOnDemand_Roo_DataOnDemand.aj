// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.innova4b.model;

import com.innova4b.model.Avion;
import com.innova4b.model.AvionDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect AvionDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AvionDataOnDemand: @Component;
    
    private Random AvionDataOnDemand.rnd = new SecureRandom();
    
    private List<Avion> AvionDataOnDemand.data;
    
    public Avion AvionDataOnDemand.getNewTransientAvion(int index) {
        Avion obj = new Avion();
        setCaducidadLicencia(obj, index);
        setCodigoLicencia(obj, index);
        setEstadoLicencia(obj, index);
        setHoraLlegada(obj, index);
        setHoraSalida(obj, index);
        setIdAvion(obj, index);
        setMaxPasajeros(obj, index);
        setModelo(obj, index);
        return obj;
    }
    
    public void AvionDataOnDemand.setCaducidadLicencia(Avion obj, int index) {
        Date caducidadLicencia = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCaducidadLicencia(caducidadLicencia);
    }
    
    public void AvionDataOnDemand.setCodigoLicencia(Avion obj, int index) {
        String codigoLicencia = "codigoLicencia_" + index;
        obj.setCodigoLicencia(codigoLicencia);
    }
    
    public void AvionDataOnDemand.setEstadoLicencia(Avion obj, int index) {
        int estadoLicencia = index;
        obj.setEstadoLicencia(estadoLicencia);
    }
    
    public void AvionDataOnDemand.setHoraLlegada(Avion obj, int index) {
        Date horaLlegada = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setHoraLlegada(horaLlegada);
    }
    
    public void AvionDataOnDemand.setHoraSalida(Avion obj, int index) {
        Date horaSalida = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setHoraSalida(horaSalida);
    }
    
    public void AvionDataOnDemand.setIdAvion(Avion obj, int index) {
        Long idAvion = new Integer(index).longValue();
        obj.setIdAvion(idAvion);
    }
    
    public void AvionDataOnDemand.setMaxPasajeros(Avion obj, int index) {
        int maxPasajeros = index;
        obj.setMaxPasajeros(maxPasajeros);
    }
    
    public void AvionDataOnDemand.setModelo(Avion obj, int index) {
        String modelo = "modelo_" + index;
        if (modelo.length() > 45) {
            modelo = modelo.substring(0, 45);
        }
        obj.setModelo(modelo);
    }
    
    public Avion AvionDataOnDemand.getSpecificAvion(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Avion obj = data.get(index);
        Long id = obj.getId();
        return Avion.findAvion(id);
    }
    
    public Avion AvionDataOnDemand.getRandomAvion() {
        init();
        Avion obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Avion.findAvion(id);
    }
    
    public boolean AvionDataOnDemand.modifyAvion(Avion obj) {
        return false;
    }
    
    public void AvionDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Avion.findAvionEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Avion' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Avion>();
        for (int i = 0; i < 10; i++) {
            Avion obj = getNewTransientAvion(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
